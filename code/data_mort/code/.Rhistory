str(df)
samp_ind_tr = sample(1:n, n/2, replace = FALSE)
str(obs[[1]])
length(obs)
samp_ind_tr = sample(1:n, n/2, replace = FALSE)
samp_ind_tr
obs[[1]][[1]]$quant
qin_tr = lapply(samp_ind_tr, function(ind){
lapply(1:length(years), function(j){
obs[[1]][[1]]$quant
})
})
str(qin_tr)
dat_Z_tr =  Z[samp_ind_tr,]
dat_Z_tst =  Z[((1:n)[-samp_ind_tr]),]
str(qin_tr[[1]][[1]])
############
##function to fit the subject level (first step) Global Fr Regression to compute the random effects at the end points of the time domain
subject_level_GFR = function(ind){
dens_quant_country_ind =lapply(years, function(year){
country = countries[ind]
data_density(country,year)
})
qin = t(sapply(1:length(years), function(year){
dens_quant_country_ind[[year]]$quant
}))
dSup =  t(sapply(1:length(years), function(year){
dens_quant_country_ind[[year]]$dens$x
}))
dSup_mean = colMeans(dSup)
xin = (years - yearStart)/ (yearEnd - yearStart)
obj_fit = frechet::GloDenReg(xin = xin, qin = qin, xout = c(0,1),
optns = list(qSup = seq(0,1,length.out = 500),
dSup = dSup_mean,
lower = 72, upper = 120))$qout
qin = lapply(1:length(years), function(year){
dens_quant_country_ind[[year]]$quant
})
return(list(qin = qin, obj_fit = obj_fit, dSup_mean = dSup_mean))
}
dSup_mean = colMeans(t(sapply(1:n, function(ind){
second_step_resp[[ind]]$dSup_mean
})))
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
###################
###################
## Load the necessary files from above
load("../data/second_step_resp.Rda")
df = read.csv("../data/lt_subset.csv",header = TRUE)
Z = read.csv("../data/covariate_1991.csv",header = TRUE)
####### loading the observed data -- quantiles and densities
load("../data/obs_dens_quant.Rda")
countries = unique(df$Country)
yearStart = 1990
yearEnd = 2019
years = yearStart:yearEnd
n = length(countries)
samp_ind_tr = sample(1:n, n/2, replace = FALSE)
qin_tr = lapply(samp_ind_tr, function(ind){
lapply(1:length(years), function(j){
obs[[ind]][[j]]$quant
})
})
length(years)
qin_tr = lapply(samp_ind_tr, function(ind){
lapply(1:length(years), function(j){
obs[[j]][[ind]]$quant
})
})
dat_Z_tr =  Z[samp_ind_tr,]
dat_Z_tst =  Z[((1:n)[-samp_ind_tr]),]
dSup_mean = colMeans(t(sapply(1:n, function(ind){
second_step_resp[[ind]]$dSup_mean
})))
xin = (years - yearStart)/ (yearEnd - yearStart)
str(qin_tr)
############
##function to fit the subject level (first step) Global Fr Regression to compute the random effects at the end points of the time domain
subject_level_GFR = function(ind){
dens_quant_country_ind =lapply(years, function(year){
country = countries[ind]
data_density(country,year)
})
qin = t(sapply(1:length(years), function(year){
dens_quant_country_ind[[year]]$quant
}))
dSup =  t(sapply(1:length(years), function(year){
dens_quant_country_ind[[year]]$dens$x
}))
dSup_mean = colMeans(dSup)
xin = (years - yearStart)/ (yearEnd - yearStart)
obj_fit = frechet::GloDenReg(xin = xin, qin = qin, xout = c(0,1),
optns = list(qSup = seq(0,1,length.out = 500),
dSup = dSup_mean,
lower = 72, upper = 120))$qout
return(list(qin = qin, obj_fit = obj_fit, dSup_mean = dSup_mean))
}
second_step_resp = lapply(samp_ind_tr, function(ind){
subject_level_GFR = subject_level_GFR(ind)
qin = subject_level_GFR$qin
dSup_mean = subject_level_GFR$dSup_mean
obj_fit_ind = subject_level_GFR$obj_fit
mi_hat0 = obj_fit_ind[1,]
mi_hat1 = obj_fit_ind[2,]
return(list(qin = qin, mi_hat0 = mi_hat0, mi_hat1 = mi_hat1, dSup_mean = dSup_mean))
})
############
##function to produce density and quantile for each country and at each year
data_density <- function(country,year){
data_sub = subset(df, (Year == year) & (Country == country))
lx_year <- as.numeric(as.vector(data_sub$lx))
binY <- seq(75,110,length.out = length(lx_year)+1)
density <- frechet::CreateDensity(freq = lx_year,  bin=binY,
optns = list(nRegGrid = 500))
quantile <- fdadensity::dens2quantile(dens = density$y, dSup = density$x,
qSup = seq(0,1,length.out = 500))
return(list(dens = density, quant = quantile))
}
second_step_resp = lapply(samp_ind_tr, function(ind){
subject_level_GFR = subject_level_GFR(ind)
qin = subject_level_GFR$qin
dSup_mean = subject_level_GFR$dSup_mean
obj_fit_ind = subject_level_GFR$obj_fit
mi_hat0 = obj_fit_ind[1,]
mi_hat1 = obj_fit_ind[2,]
return(list(qin = qin, mi_hat0 = mi_hat0, mi_hat1 = mi_hat1, dSup_mean = dSup_mean))
})
second_step_resp0 = t(sapply(samp_ind_tr, function(ind){ ###first step estimate of random effects at time 0 -- quantile representation
second_step_resp[[ind]]$mi_hat0
}))
str(second_step_resp)
samp_ind_tr
second_step_resp0 = t(sapply(1:(n/2), function(ind){ ###first step estimate of random effects at time 0 -- quantile representation
second_step_resp[[ind]]$mi_hat0
}))
second_step_resp1 = t(sapply(1:(n/2), function(ind){ ###first step estimate of random effects at time 1 -- quantile representation
second_step_resp[[ind]]$mi_hat1
}))
qSup = seq(0, 1, length.out = 500)#support of quantile function
second_step_gfr_fit0 = frechet::GloDenReg(xin = dat_Z_tr,
qin = second_step_resp0,
xout = dat_Z_tst,
optns = list(qSup = qSup, ndSup = 500))
dat_Z_tr
second_step_gfr_fit0 = frechet::GloDenReg(xin = as.matrix(dat_Z_tr),
qin = second_step_resp0,
xout = as.matrix(dat_Z_tst),
optns = list(qSup = qSup, ndSup = 500))
second_step_gfr_fit1 = frechet::GloDenReg(xin =  as.matrix(dat_Z_tr),
qin = second_step_resp1,
xout = as.matrix(dat_Z_tst),
optns = list(qSup = qSup, ndSup = 500))
ni = length(years)
Ti = (years -  years[1])/(years[length(years)] - years[1]) ##standarized time domain
Ti
str(second_step_gfr_fit0)
str(second_step_gfr_fit0$qout)
ni
qout =  t(sapply(1:ni, function(j){
q_geo(Ti[j], second_step_gfr_fit0$qout[ind,], second_step_gfr_fit1$qout[ind,])
}))
q_geo = function(t,A,B){ ##any point on the geodesic
t*A + (1-t)*B
}
qout =  t(sapply(1:ni, function(j){
q_geo(Ti[j], second_step_gfr_fit0$qout[ind,], second_step_gfr_fit1$qout[ind,])
}))
as.matrix(dat_Z_tst)
nrow(as.matrix(dat_Z_tst))
qout =  lapply(1:nrow(as.matrix(dat_Z_tst)), function(ind){
out = t(sapply(1:ni, function(j){
q_geo(Ti[j], second_step_gfr_fit0$qout[ind,], second_step_gfr_fit1$qout[ind,])
}))
})
str(qout)
qout =  lapply(1:nrow(as.matrix(dat_Z_tst)), function(ind){
out = lapply(1:ni, function(j){
q_geo(Ti[j], second_step_gfr_fit0$qout[ind,], second_step_gfr_fit1$qout[ind,])
})
})
str(qout)
qin_tst = lapply(((1:n)[-samp_ind_tr]), function(ind){
lapply(1:length(years), function(j){
obs[[ind]][[j]]$quant
})
})
qin_tst = lapply(((1:n)[-samp_ind_tr]), function(ind){
lapply(1:length(years), function(j){
obs[[j]][[ind]]$quant
})
})
str(qin_tst)
length(qin_tst)
length(qin_tst[[1]])
length(qout[[1]])
length(qout)
nrow(dat_test$Z)
str(qin_tst[[1]][[1]])
rmpe_test = mean(sapply(1:length(qin_tst), function(ind){
mean(sapply(1:ni, function(j){
sum((qin_tst[[ind]][[j]] - qout[[ind]][[j]])^2)*diff(qSup)[1]
}))
}))
rmpe_test
ind = j =1
sum((qin_tst[[ind]][[j]] - qout[[ind]][[j]])^2)*diff(qSup)[1]
mean(sapply(1:ni, function(j){
sum((qin_tst[[ind]][[j]] - qout[[ind]][[j]])^2)*diff(qSup)[1]
}))
sapply(1:ni, function(j){
sum((qin_tst[[ind]][[j]] - qout[[ind]][[j]])^2)*diff(qSup)[1]
})
rmpe_test = mean(sapply(1:length(qin_tst), function(ind){
mean(sapply(1:ni, function(j){
mean((qin_tst[[ind]][[j]] - qout[[ind]][[j]])^2)*diff(qSup)[1]
}))
}))
rmpe_test
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(ggplot2)
library(frechet)
############# additional processing and fitting first step regression
#### Time consuming -- outputs saved as Rda files --
###skip running this part go to line 68
df = read.csv("../data/lt_subset.csv",header = TRUE) ###life tables for countries over the years from human mortality database (processed)
Z = read.csv("../data/covariate_1990.csv",header = TRUE) ###baseline covariates from world bank data (processed)
countries = unique(df$Country)
yearStart = 1990
yearEnd = 2019
years = yearStart:yearEnd
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(ggplot2)
library(frechet)
###################
###################
## Load the necessary files from above
load("../data/second_step_resp.Rda")
df = read.csv("../data/lt_subset.csv",header = TRUE)
Z = read.csv("../data/covariate_1991.csv",header = TRUE)
Z = read.csv("../data/covariate_1990.csv",header = TRUE)
countries = unique(df$Country)
yearStart = 1990
yearEnd = 2019
years = yearStart:yearEnd
n = length(countries)
qin =  lapply(1:n, function(ind){ ###input quantile functions for each country and for each year
second_step_resp[[ind]]$qin
})
second_step_resp0 = t(sapply(1:n, function(ind){ ###first step estimate of random effects at time 0 -- quantile representation
second_step_resp[[ind]]$mi_hat0
}))
second_step_resp1 = t(sapply(1:n, function(ind){ ###first step estimate of random effects at time 1 -- quantile representation
second_step_resp[[ind]]$mi_hat1
}))
qSup = seq(0, 1, length.out = 500) #support of quantile function
Z = as.matrix(Z)
q_geo = function(t,A,B){ ##any point on the geodesic
t*A + (1-t)*B
}
ni = length(years)
Ti = (years -  years[1])/(years[length(years)] - years[1]) ##standarized time domain
############
## Effects of the baseline covariates
############
######compare pred at the two end years
##first pred - unemployment
zout1 = as.matrix(cbind(sort(Z[,1]),
mean(Z[,2]),
mean(Z[,3]),
mean(Z[,4])))
### Fitting the final estimate at varying values of unemployment rate, while all the other predictors are fixed at their mean levels
second_step_gfr_fitz10 = frechet::GloDenReg(xin = Z, qin = second_step_resp0,
xout =  zout1,
optns = list(qSup = qSup, ndSup = 500))
second_step_gfr_fitz11 = frechet::GloDenReg(xin = Z, qin = second_step_resp1,
xout = zout1,
optns = list(qSup = qSup, ndSup = 500))
### Generating Figure S.5
df10 =  lapply(1:n, function(i){
data.frame( domain = second_step_gfr_fitz10$dout[[i]]$x,
dens = second_step_gfr_fitz10$dout[[i]]$y,
gdp_rank = rep(round(zout1[i,1],2), 500))
})
df10 = do.call(rbind, df10)
df11 =  lapply(1:n, function(i){
data.frame( domain = second_step_gfr_fitz11$dout[[i]]$x,
dens = second_step_gfr_fitz11$dout[[i]]$y,
gdp_rank = rep(round(zout1[i,1],2), 500))
})
df11 = do.call(rbind, df11)
df_pred1 = data.frame(rbind(df10,df11))
df_pred1$year = c(rep("Year 1990",500*n),rep("Year 2019",500*n))
df_pred1$pred = rep(rep("Unemployment",each = 500),2)
pred1 = round(sort(Z[,1]),2)
p1 = ggplot(data = df_pred1) +
geom_line(aes(x = domain, y = dens, col = gdp_rank, group = gdp_rank),
size = .5) +
theme_bw() +
scale_color_gradient( low="blue", high="red", name = "Unemployment\n rate",
breaks = seq(min(pred1),max(pred1),length.out = 5),
labels=summary(pred1)[-4])+
labs(y = "Remaining life densities", x = "Age") +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=12),
legend.title = element_text(size=12),
strip.text.y = element_blank(),
legend.position="bottom", legend.text = element_text(angle = 90)) +
facet_wrap(~year)
p1
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(ggplot2)
library(frechet)
############# additional processing and fitting first step regression
#### Time consuming -- outputs saved as Rda files --
###skip running this part go to line 68
df = read.csv("../data/lt_subset.csv",header = TRUE) ###life tables for countries over the years from human mortality database (processed)
Z = read.csv("../data/covariate_1990.csv",header = TRUE) ###baseline covariates from world bank data (processed)
countries = unique(df$Country)
yearStart = 1990
yearEnd = 2019
years = yearStart:yearEnd
n = length(countries)
###################
###################
## Load the necessary files from above
load("../data/second_step_resp.Rda")
df = read.csv("../data/lt_subset.csv",header = TRUE)
Z = read.csv("../data/covariate_1990.csv",header = TRUE)
countries = unique(df$Country)
yearStart = 1990
yearEnd = 2019
years = yearStart:yearEnd
n = length(countries)
qin =  lapply(1:n, function(ind){ ###input quantile functions for each country and for each year
second_step_resp[[ind]]$qin
})
second_step_resp0 = t(sapply(1:n, function(ind){ ###first step estimate of random effects at time 0 -- quantile representation
second_step_resp[[ind]]$mi_hat0
}))
second_step_resp1 = t(sapply(1:n, function(ind){ ###first step estimate of random effects at time 1 -- quantile representation
second_step_resp[[ind]]$mi_hat1
}))
qSup = seq(0, 1, length.out = 500) #support of quantile function
Z = as.matrix(Z)
q_geo = function(t,A,B){ ##any point on the geodesic
t*A + (1-t)*B
}
ni = length(years)
Ti = (years -  years[1])/(years[length(years)] - years[1]) ##standarized time domain
############
## Effects of the baseline covariates
############
######compare pred at the two end years
##first pred - unemployment -- Generating Figure S.5
zout1 = as.matrix(cbind(sort(Z[,1]),
mean(Z[,2]),
mean(Z[,3]),
mean(Z[,4])))
### Fitting the final estimate at varying values of unemployment rate, while all the other predictors are fixed at their mean levels
second_step_gfr_fitz10 = frechet::GloDenReg(xin = Z, qin = second_step_resp0,
xout =  zout1,
optns = list(qSup = qSup, ndSup = 500))
second_step_gfr_fitz11 = frechet::GloDenReg(xin = Z, qin = second_step_resp1,
xout = zout1,
optns = list(qSup = qSup, ndSup = 500))
### Generating Figure S.5
df10 =  lapply(1:n, function(i){
data.frame( domain = second_step_gfr_fitz10$dout[[i]]$x,
dens = second_step_gfr_fitz10$dout[[i]]$y,
gdp_rank = rep(round(zout1[i,1],2), 500))
})
df10 = do.call(rbind, df10)
df11 =  lapply(1:n, function(i){
data.frame( domain = second_step_gfr_fitz11$dout[[i]]$x,
dens = second_step_gfr_fitz11$dout[[i]]$y,
gdp_rank = rep(round(zout1[i,1],2), 500))
})
df11 = do.call(rbind, df11)
df_pred1 = data.frame(rbind(df10,df11))
df_pred1$year = c(rep("Year 1990",500*n),rep("Year 2019",500*n))
df_pred1$pred = rep(rep("Unemployment",each = 500),2)
pred1 = round(sort(Z[,1]),2)
p1 = ggplot(data = df_pred1) +
geom_line(aes(x = domain, y = dens, col = gdp_rank, group = gdp_rank),
size = .5) +
theme_bw() +
scale_color_gradient( low="blue", high="red", name = "Unemployment\n rate",
breaks = seq(min(pred1),max(pred1),length.out = 5),
labels=summary(pred1)[-4])+
labs(y = "Remaining life densities", x = "Age") +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=12),
legend.title = element_text(size=12),
strip.text.y = element_blank(),
legend.position="bottom", legend.text = element_text(angle = 90)) +
facet_wrap(~year)
p1
######
##third pred - gdp per capita
zout3 = as.matrix(cbind(mean(Z[,1]),
mean(Z[,2]),
sort(Z[,3]),
mean(Z[,4])))
### Fitting the final estimate at varying values of GDP per capita, while all the other predictors are fixed at their mean levels
second_step_gfr_fitz30 = frechet::GloDenReg(xin = Z, qin = second_step_resp0,
xout =  zout3,
optns = list(qSup = qSup, ndSup = 500))
second_step_gfr_fitz31 = frechet::GloDenReg(xin = Z, qin = second_step_resp1,
xout = zout3,
optns = list(qSup = qSup, ndSup = 500))
### Generating Figure S.2
df30 =  lapply(1:n, function(i){
data.frame( domain = second_step_gfr_fitz30$dout[[i]]$x,
dens = second_step_gfr_fitz30$dout[[i]]$y,
gdp_rank = rep(zout3[i,3], 500))
})
df30 = do.call(rbind, df30)
df31 =  lapply(1:n, function(i){
data.frame( domain = second_step_gfr_fitz31$dout[[i]]$x,
dens = second_step_gfr_fitz31$dout[[i]]$y,
gdp_rank = rep(zout3[i,3], 500))
})
df31 = do.call(rbind, df31)
df_pred3 = data.frame(rbind(df30,df31))
df_pred3$year = c(rep("Year 1990",500*n),rep("Year 2019",500*n))
df_pred3$pred = rep(rep("GDP per capita",each = 500),2)
pred3 = round(sort(Z[,3]),2)
p3 = ggplot(data = df_pred3) +
geom_line(aes(x = domain, y = dens, col = gdp_rank, group = gdp_rank),
size = .5) +
theme_bw() +
scale_color_gradient( low="blue", high="red", name = "GDP\n per capita",
breaks = seq(min(pred3),max(pred3),length.out = 5),
labels=round(summary(pred3)[-4],2))+
labs(y = "Remaining life densities", x = "Age") +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=12),
legend.title = element_text(size=12),
strip.text.y = element_blank(),
legend.text = element_text(angle = 90),
legend.position="bottom", legend.direction="horizontal") +
facet_wrap(~year)
p3
p3 = ggplot(data = df_pred3) +
geom_line(aes(x = domain, y = dens, col = gdp_rank, group = gdp_rank),
size = .5) +
theme_bw() +
scale_color_gradient( low="blue", high="red", name = "GDP\n per capita",
breaks = seq(min(pred3),max(pred3),length.out = 5),
labels=round(summary(pred3)[-4],2))+
labs(y = "Remaining life densities", x = "Age") +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=12),
legend.title = element_text(size=12),
strip.text.y = element_blank(),
legend.text = element_text(angle = 90),
legend.position="bottom", legend.direction="vertical") +
facet_wrap(~year)
p3
p3 = ggplot(data = df_pred3) +
geom_line(aes(x = domain, y = dens, col = gdp_rank, group = gdp_rank),
size = .5) +
theme_bw() +
scale_color_gradient( low="blue", high="red", name = "GDP\n per capita",
breaks = seq(min(pred3),max(pred3),length.out = 5),
labels=round(summary(pred3)[-4],2))+
labs(y = "Remaining life densities", x = "Age") +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=12),
legend.title = element_text(size=12),
strip.text.y = element_blank(),
legend.text = element_text(angle = 90),
legend.position="right", legend.direction="horizontal") +
facet_wrap(~year)
p3
p3 = ggplot(data = df_pred3) +
geom_line(aes(x = domain, y = dens, col = gdp_rank, group = gdp_rank),
size = .5) +
theme_bw() +
scale_color_gradient( low="blue", high="red", name = "GDP\n per capita",
breaks = seq(min(pred3),max(pred3),length.out = 5),
labels=round(summary(pred3)[-4],2))+
labs(y = "Remaining life densities", x = "Age") +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=12),
legend.title = element_text(size=12),
strip.text.y = element_blank(),
legend.text = element_text(angle = 90),
legend.position="right", legend.direction="vertical") +
facet_wrap(~year)
p3
p3 = ggplot(data = df_pred3) +
geom_line(aes(x = domain, y = dens, col = gdp_rank, group = gdp_rank),
size = .5) +
theme_bw() +
scale_color_gradient( low="blue", high="red", name = "GDP\n per capita",
breaks = seq(min(pred3),max(pred3),length.out = 5),
labels=round(summary(pred3)[-4],2))+
labs(y = "Remaining life densities", x = "Age") +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=12),
legend.title = element_text(size=12),
strip.text.y = element_blank(),
#legend.text = element_text(angle = 90),
legend.position="right", legend.direction="vertical") +
facet_wrap(~year)
p3
ggsave("../output/change_pred_GDP_year011_final.pdf", width = 8, height = 7)
