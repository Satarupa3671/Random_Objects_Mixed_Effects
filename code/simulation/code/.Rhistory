n <- 101
xin <- seq(-1,1,length.out = n)
theta_true <- rep(pi/2,n)
phi_true <- (xin + 1) * pi / 4
ytrue <- apply( cbind( 1, phi_true, theta_true ), 1, pol2car )
pol2car <- function(p) {
d <- length(p)
if (d < 2) stop("p must have at least 2 elements.")
r <- p[1]
theta <- p[-1]
x <- r * sin(theta[d-1])
if (d == 2) {
x <- c(r * cos(theta), x)
} else {
for (i in 2:(d-1)) {
x[i] <- r * prod(cos(theta[(d-i+1):(d-1)])) * sin(theta[d-i])
}
x[d] <- r * prod(cos(theta))
x <- x[d:1]
}
return(x)
}
ytrue <- apply( cbind( 1, phi_true, theta_true ), 1, pol2car )
yin <- t( ytrue )
xin
xout = .2
xout <- mean(xin)
GloSpheGeoReg <- function(xin, yin, xout) {
k = length(xout)
n = nrow(xin)
m = ncol(yin)
xbar <- colMeans(xin)
Sigma <- cov(xin) * (n-1) / n
invSigma <- solve(Sigma)
s <- 1 + t(t(xin) - xbar) %*% invSigma %*% (xout - xbar)
s <- as.vector(s)
# initial guess
y0 = colMeans(yin*s)
y0 = y0 / l2norm(y0)
if (sum(sapply(1:n, function(i) sum(yin[i,]*y0)) > 1-1e-8)){
#if (sum( is.infinite (sapply(1:n, function(i) (1 - sum(yin[i,]*y0)^2)^(-0.5) )[ker((xout[j] - xin) / bw)>0] ) ) +
#   sum(sapply(1:n, function(i) 1 - sum(yin[i,] * y0)^2 < 0)) > 0){
# return(y0)
y0 = y0 + rnorm(3) * 1e-3
y0 = y0 / l2norm(y0)
}
objFctn = function(y){
y <- y / l2norm(y)
f = mean(s * sapply(1:n, function(i) SpheGeoDist(yin[i,], y)^2))
if (abs(l2norm(y)-1) > 1e-15) {
return(list(value = Inf))
}
g = 2 * colMeans(t(sapply(1:n, function(i) SpheGeoDist(yin[i,], y) * SpheGeoGrad(yin[i,], y))) * s)
res = sapply(1:n, function(i){
grad_i = SpheGeoGrad(yin[i,], y)
return((grad_i %*% t(grad_i) + SpheGeoDist(yin[i,], y) * SpheGeoHess(yin[i,], y)) * s[i])
}, simplify = "array")
h = 2 * apply(res, 1:2, mean)
return(list(value=f, gradient=g, hessian=h))
}
res = trust::trust(objFctn, y0, 0.1, 1e5)
# res = trust::trust(objFctn, y0, 0.1, 1)
return(res$argument / l2norm(res$argument))
}
res <- GloSpheReg(xin=xin, yin=yin, xout=xout)
res <- GloSpheGeoReg(xin=xin, yin=yin, xout=xout)
xin = as.matrix(xin, ncol = 1)
xin
res <- GloSpheGeoReg(xin=xin, yin=yin, xout=xout)
# L2 norm
l2norm <- function(x){
#sqrt(sum(x^2))
as.numeric(sqrt(crossprod(x)))
}
res <- GloSpheGeoReg(xin=xin, yin=yin, xout=xout)
SpheGeoDist <- function(y1,y2) {
tol <- 1e-6 # Distance that the L2 norms of y1 and y2 are allowed to be away from 1.
if (abs(length(y1) - length(y2)) > 0) {
stop("y1 and y2 should be of the same length.")
}
if (abs(l2norm(y1)-1) > tol) {
stop("y1 is not a unit vector.")
}
if (abs(l2norm(y2)-1) > tol) {
stop("y2 is not a unit vector.")
}
y1 = y1 / l2norm(y1)
y2 = y2 / l2norm(y2)
if (sum(y1 * y2) > 1){
return(0)
} else if (sum(y1*y2) < -1){
return(pi)
} else return(acos(sum(y1 * y2)))
}
# gradient w.r.t. y of the geodesic distance \eqn{\arccos(x^\top y)} on a unit hypersphere
SpheGeoGrad <- function(x,y) { #, tol = 1e-10){
tmp <- 1 - sum(x * y) ^ 2
return(- (tmp) ^ (-0.5) * x)
# if (tmp < tol) {
#   return(- Inf * x)
# } else {
#   return(- (tmp) ^ (-0.5) * x)
# }
}
# Hessian \eqn{\partial^2/\partial y \partial y^\top} of the geodesic distance \eqn{\arccos(x^\top y)} on a unit hypersphere
SpheGeoHess <- function(x,y) { #,tol = 1e-10){
return(- sum(x * y) * (1 - sum(x * y) ^ 2) ^ (-1.5) * x %*% t(x))
}
res <- GloSpheGeoReg(xin=xin, yin=yin, xout=xout)
#rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
################dense design
###dense setting 1
load("../data/MISE_density_boxplot_comp_dense_n50_setting1.Rda")
str(res)
################dense design
###dense setting 1
load("../data/MISE_density_boxplot_comp_dense_n50_setting1.Rda")
res_n50_dense_set1 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_dense_n400_setting1.Rda")
#################################
################################# Generating figures and output from the results across different settings
## Reading the saved .Rda files to generate Figure 3
B = 150
################dense design
###dense setting 1
load("../data/MISE_density_boxplot_comp_dense_n50_setting1.Rda")
res_n50_dense_set1 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_dense_n400_setting1.Rda")
res_n100_dense_set1 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_dense_n1000_setting1.Rda")
res_n50_dense_set1 = sapply(1:B, function(i) res[[i]]$measureWfits)
###dense setting 2
load("../data/MISE_density_boxplot_comp_dense_n50_setting2.Rda")
res_n50_dense_set2 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_dense_n400_setting2.Rda")
res_n100_dense_set2 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_dense_n1000_setting2.Rda")
res_n50_dense_set2 = sapply(1:B, function(i) res[[i]]$measureWfits)
###dense setting 3
load("../data/MISE_density_boxplot_comp_dense_n50_setting3.Rda")
res_n50_dense_set3 = sapply(1:B, function(i) res[[i]]$measureWfits )
load("../data/MISE_density_boxplot_comp_dense_n400_setting3.Rda")
res_n100_dense_set3 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_dense_n1000_setting3.Rda")
res_n50_dense_set3 = sapply(1:B, function(i) res[[i]]$measureWfits)
###dense setting 4
load("../data/MISE_density_boxplot_comp_dense_n50_setting4.Rda")
res_n50_dense_set4 = sapply(1:B, function(i) res[[i]]$measureWfits )
load("../data/MISE_density_boxplot_comp_dense_n400_setting4.Rda")
res_n100_dense_set4 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_dense_n1000_setting4.Rda")
res_n50_dense_set4 = sapply(1:B, function(i) res[[i]]$measureWfits)
################dense design
###dense setting 1
load("../data/MISE_density_boxplot_comp_dense_n50_setting1.Rda")
res_n50_dense_set1 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_dense_n400_setting1.Rda")
res_n400_dense_set1 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_dense_n1000_setting1.Rda")
res_n1000_dense_set1 = sapply(1:B, function(i) res[[i]]$measureWfits)
###dense setting 2
load("../data/MISE_density_boxplot_comp_dense_n50_setting2.Rda")
res_n50_dense_set2 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_dense_n400_setting2.Rda")
res_n400_dense_set2 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_dense_n1000_setting2.Rda")
res_n1000_dense_set2 = sapply(1:B, function(i) res[[i]]$measureWfits)
###dense setting 3
load("../data/MISE_density_boxplot_comp_dense_n50_setting3.Rda")
res_n50_dense_set3 = sapply(1:B, function(i) res[[i]]$measureWfits )
load("../data/MISE_density_boxplot_comp_dense_n400_setting3.Rda")
res_n400_dense_set3 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_dense_n1000_setting3.Rda")
res_n1000_dense_set3 = sapply(1:B, function(i) res[[i]]$measureWfits)
###dense setting 4
load("../data/MISE_density_boxplot_comp_dense_n50_setting4.Rda")
res_n50_dense_set4 = sapply(1:B, function(i) res[[i]]$measureWfits )
load("../data/MISE_density_boxplot_comp_dense_n400_setting4.Rda")
res_n400_dense_set4 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_dense_n1000_setting4.Rda")
res_n1000_dense_set4 = sapply(1:B, function(i) res[[i]]$measureWfits)
### put together in a dataframe
df_dense_setting1 = data.frame(MISE = c(res_n50_dense_set1,
res_n100_dense_set1,
res_n50_dense_set1))
### put together in a dataframe
df_dense_setting1 = data.frame(MISE = c(res_n50_dense_set1,
res_n400_dense_set1,
res_n1000_dense_set1))
df_dense_setting1$sample_size = c(rep("n = 50, ni = 30", B),
rep("n = 400, ni = 30", B),
rep("n = 1000, ni = 30", B))
df_dense_setting2 = data.frame(MISE = c(res_n50_dense_set2,
res_n400_dense_set2,
res_n1000_dense_set2))
df_dense_setting2$sample_size = c(rep("n = 50, ni = 30", B),
rep("n = 400, ni = 30", B),
rep("n = 1000, ni = 30", B))
df_dense_setting3 = data.frame(MISE = c(res_n50_dense_set3,
res_n400_dense_set3,
res_n1000_dense_set3))
df_dense_setting3$sample_size = c(rep("n = 50, ni = 30", B),
rep("n = 400, ni = 30", B),
rep("n = 1000, ni = 30", B))
df_dense_setting4 = data.frame(MISE = c(res_n50_dense_set4,
res_n400_dense_set4,
res_n1000_dense_set4))
df_dense_setting4$sample_size = c(rep("n = 50, ni = 30", B),
rep("n = 400, ni = 30", B),
rep("n = 1000, ni = 30", B))
################sparse design
###sparse setting 1
load("../data/MISE_density_boxplot_comp_sparse_n50_setting1.Rda")
res_n50_sparse_set1 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_sparse_n400_setting1.Rda")
res_n400_sparse_set1 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_sparse_n1000_setting1.Rda")
rm(list = ls())
#rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(frechet)
library(MASS)
#################################
################################# Generating figures and output from the results across different settings
## Reading the saved .Rda files to generate Figure 3
B = 150
################dense design
###dense setting 1
load("../data/MISE_density_boxplot_comp_dense_n50_setting1.Rda")
res_n50_dense_set1 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_dense_n400_setting1.Rda")
res_n400_dense_set1 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_dense_n1000_setting1.Rda")
res_n1000_dense_set1 = sapply(1:B, function(i) res[[i]]$measureWfits)
###dense setting 2
load("../data/MISE_density_boxplot_comp_dense_n50_setting2.Rda")
res_n50_dense_set2 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_dense_n400_setting2.Rda")
res_n400_dense_set2 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_dense_n1000_setting2.Rda")
res_n1000_dense_set2 = sapply(1:B, function(i) res[[i]]$measureWfits)
###dense setting 3
load("../data/MISE_density_boxplot_comp_dense_n50_setting3.Rda")
res_n50_dense_set3 = sapply(1:B, function(i) res[[i]]$measureWfits )
load("../data/MISE_density_boxplot_comp_dense_n400_setting3.Rda")
res_n400_dense_set3 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_dense_n1000_setting3.Rda")
res_n1000_dense_set3 = sapply(1:B, function(i) res[[i]]$measureWfits)
###dense setting 4
load("../data/MISE_density_boxplot_comp_dense_n50_setting4.Rda")
res_n50_dense_set4 = sapply(1:B, function(i) res[[i]]$measureWfits )
load("../data/MISE_density_boxplot_comp_dense_n400_setting4.Rda")
res_n400_dense_set4 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_dense_n1000_setting4.Rda")
res_n1000_dense_set4 = sapply(1:B, function(i) res[[i]]$measureWfits)
### put together in a dataframe
df_dense_setting1 = data.frame(MISE = c(res_n50_dense_set1,
res_n400_dense_set1,
res_n1000_dense_set1))
df_dense_setting1$sample_size = c(rep("n = 50, ni = 30", B),
rep("n = 400, ni = 30", B),
rep("n = 1000, ni = 30", B))
df_dense_setting2 = data.frame(MISE = c(res_n50_dense_set2,
res_n400_dense_set2,
res_n1000_dense_set2))
df_dense_setting2$sample_size = c(rep("n = 50, ni = 30", B),
rep("n = 400, ni = 30", B),
rep("n = 1000, ni = 30", B))
df_dense_setting3 = data.frame(MISE = c(res_n50_dense_set3,
res_n400_dense_set3,
res_n1000_dense_set3))
df_dense_setting3$sample_size = c(rep("n = 50, ni = 30", B),
rep("n = 400, ni = 30", B),
rep("n = 1000, ni = 30", B))
df_dense_setting4 = data.frame(MISE = c(res_n50_dense_set4,
res_n400_dense_set4,
res_n1000_dense_set4))
df_dense_setting4$sample_size = c(rep("n = 50, ni = 30", B),
rep("n = 400, ni = 30", B),
rep("n = 1000, ni = 30", B))
################sparse design
###sparse setting 1
load("../data/MISE_density_boxplot_comp_sparse_n50_setting1.Rda")
res_n50_sparse_set1 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_sparse_n400_setting1.Rda")
res_n400_sparse_set1 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_sparse_n1000_setting1.Rda")
res_n1000_sparse_set1 = sapply(1:B, function(i) res[[i]]$measureWfits)
###sparse setting 2
load("../data/MISE_density_boxplot_comp_sparse_n50_setting2.Rda")
res_n50_sparse_set2 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_sparse_n400_setting2.Rda")
res_n400_sparse_set2 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_sparse_n1000_setting2.Rda")
res_n1000_sparse_set2 = sapply(1:B, function(i) res[[i]]$measureWfits)
###sparse setting 3
load("../data/MISE_density_boxplot_comp_sparse_n50_setting3.Rda")
res_n50_sparse_set3 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_sparse_n400_setting3.Rda")
res_n400_sparse_set3 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_sparse_n1000_setting3.Rda")
res_n1000_sparse_set3 = sapply(1:B, function(i) res[[i]]$measureWfits)
###sparse setting 4
load("../data/MISE_density_boxplot_comp_sparse_n50_setting4.Rda")
res_n50_sparse_set4 = sapply(1:B, function(i) res[[i]]$measureWfits )
load("../data/MISE_density_boxplot_comp_sparse_n400_setting4.Rda")
res_n400_sparse_set4 = sapply(1:B, function(i) res[[i]]$measureWfits)
load("../data/MISE_density_boxplot_comp_sparse_n1000_setting4.Rda")
res_n1000_sparse_set4 = sapply(1:B, function(i) res[[i]]$measureWfits)
###
### put together in a dataframe
df_sparse_setting1 = data.frame(MISE = c(res_n50_sparse_set1,
res_n400_sparse_set1,
res_n1000_sparse_set1))
df_sparse_setting1$sample_size = c(rep("n = 50, ni = 30", B),
rep("n = 400, ni = 30", B),
rep("n = 1000, ni = 30", B))
df_sparse_setting2 = data.frame(MISE = c(res_n50_sparse_set2,
res_n400_sparse_set2,
res_n1000_sparse_set2))
df_sparse_setting2$sample_size = c(rep("n = 50, ni = 30", B),
rep("n = 400, ni = 30", B),
rep("n = 1000, ni = 30", B))
df_sparse_setting3 = data.frame(MISE = c(res_n50_sparse_set3,
res_n400_sparse_set3,
res_n1000_sparse_set3))
df_sparse_setting3$sample_size = c(rep("n = 50, ni = 30", B),
rep("n = 400, ni = 30", B),
rep("n = 1000, ni = 30", B))
df_sparse_setting4 = data.frame(MISE = c(res_n50_sparse_set4,
res_n400_sparse_set4,
res_n1000_sparse_set4))
df_sparse_setting4$sample_size = c(rep("n = 50, ni = 30", B),
rep("n = 400, ni = 30", B),
rep("n = 1000, ni = 30", B))
############################## Generating Frigure 3
df_overall = rbind(df_dense_setting1,
df_dense_setting2,
df_dense_setting3,
df_dense_setting4,
df_sparse_setting1,
df_sparse_setting2,
df_sparse_setting3,
df_sparse_setting4)
df_overall$sample_size2 = rep(rep(c(rep("n = 50",B), rep("n = 400",B), rep("n = 1000",B)),4),2)
df_overall$sample_design = c(rep("Dense design", B*3*4), rep("Sparse design", B*3*4))
df_overall$setting =  rep(c(rep("Setting I", B*3),
rep("Setting II", B*3),
rep("Setting III", B*3),
rep("Setting IV", B*3)),2)
neworder <- c("n = 50","n = 400", "n = 1000")
library(dplyr)
df_overall2 <- arrange(transform(df_overall,
sample_size2 = factor(sample_size2,levels=neworder)),
sample_size2)
p = ggplot(df_overall2, aes(sample_size2, MISE)) +
geom_boxplot(aes(fill = factor(sample_design))) +
#stat_boxplot(geom ='errorbar') +
labs(x = NULL , y = "ISE") +theme_bw()+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=12),
legend.title = element_blank(),
legend.position="bottom", strip.text.y = element_blank()) +
facet_wrap(setting~., scales = "free_y")
p
library(dplyr); library(ggplot2)
df_overall2 <- arrange(transform(df_overall,
sample_size2 = factor(sample_size2,levels=neworder)),
sample_size2)
p = ggplot(df_overall2, aes(sample_size2, MISE)) +
geom_boxplot(aes(fill = factor(sample_design))) +
#stat_boxplot(geom ='errorbar') +
labs(x = NULL , y = "ISE") +theme_bw()+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=12),
legend.title = element_blank(),
legend.position="bottom", strip.text.y = element_blank()) +
facet_wrap(setting~., scales = "free_y")
p
ggsave("../output/mise_boxplot_over_n_ni_setting_final.pdf",
width = 8, height = 7)
##### Generating Figure 1
load("../data/subj_sp_over_alpha_A1_Setting4.Rda")
res_a0 = res
load("../data/subj_sp_over_alpha_A2_Setting4.Rda")
res_a1 = res
load("../data/subj_sp_over_alpha_A3_Setting4.Rda")
res_a2 = res
### gathering all data for visualization
dat_a = function(res){
dtrue_overall_ind_display = do.call(rbind, lapply(c(1,5,12), function(j){
data.frame(domain = res$dtrue_overall_ind[[j]]$x,
dens = res$dtrue_overall_ind[[j]]$y,
time = rep(as.character(round(res$Ti[[ind]],2)[j]), 100))
}))
din_overall_ind_display = do.call(rbind, lapply(c(1,5,12), function(j){
data.frame(domain = res$din_overall_ind[[j]]$x,
dens = res$din_overall_ind[[j]]$y,
time = rep(as.character(round(res$Ti[[ind]],2)[j]), 100))
}))
dout_overall_ind_display = do.call(rbind, lapply(c(1,5,12), function(j){
data.frame(domain = res$dout_overall_ind[[j]]$x,
dens = res$dout_overall_ind[[j]]$y,
time = rep(as.character(round(res$Ti[[ind]],2)[j]), 100))
}))
dat = rbind(dtrue_overall_ind_display,din_overall_ind_display,dout_overall_ind_display)
dat$type = c(rep("dtrue", 100*3), rep("din", 100*3),rep("dout", 100*3))
return(dat)
}
ind = 1
dat_a0 = dat_a(res_a0); dat_a1 = dat_a(res_a1); dat_a2 = dat_a(res_a2)
dat_a0$time[dat_a0$time == unique(dat_a0$time)[1]] = "0"
dat_a1$time[dat_a1$time == unique(dat_a1$time)[1]] = "0"
dat_a2$time[dat_a2$time == unique(dat_a2$time)[1]] = "0"
dat_a0$time[dat_a0$time == unique(dat_a0$time)[2]] = "0.50"
dat_a1$time[dat_a1$time == unique(dat_a1$time)[2]] = "0.50"
dat_a2$time[dat_a2$time == unique(dat_a2$time)[2]] = "0.50"
dat_a0$time[dat_a0$time == unique(dat_a0$time)[3]] = "1"
dat_a1$time[dat_a1$time == unique(dat_a1$time)[3]] = "1"
dat_a2$time[dat_a2$time == unique(dat_a2$time)[3]] = "1"
dat_combined = rbind(dat_a0,dat_a1,dat_a2)
dat_combined$alpha = c(rep("a0",nrow(dat_a0)), rep("a1",nrow(dat_a1)), rep("a2",nrow(dat_a2)))
alpha.labs = c(a0 = "alpha[1] == 0.01", a1 = "alpha[2] == 0.1", a2 = "alpha[3] == 0.3")
t.labs = c("0" = "t == 0", "0.50" = "t == 0.50", "1" = "t == 1")
library(ggplot2)
cols = c("red", "springgreen4", "blue")
p = ggplot() +
geom_line(data = dat_combined,
aes(x = domain, y = dens, color = type, group = type), linewidth = .4) +
theme_bw() +
scale_colour_manual(values = cols, name = " ",
labels = c("True", "Observed", "Estimated"))+
labs(x = "Domain", y = "Densities") +
theme(axis.text = element_text(size = 12),
axis.text.x = element_text(size = 10, angle = 45),
axis.text.y = element_text(size = 10),
axis.title = element_text(size  = 12),
legend.title = element_text(size  = 12),
strip.text.x = element_text(size  = 12),
strip.text.y = element_text(size  = 12),
legend.text = element_text(size = 12),
legend.position = "bottom") +
facet_grid(time~alpha, labeller = as_labeller(c(t.labs,alpha.labs), default = label_parsed),
scales = "free")
p
ggsave("../output/density_true_obs_estd_over_alpha_final.pdf",
width = 8, height = 7)
